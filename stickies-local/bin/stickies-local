#!/usr/bin/env ruby
require "stickies-local"
require "FileUtils"
require "yaml"
require "socket"

module Calacoles

  class AbstractStickiesCmd

    def cmd(cmd,*args)
      cmdarg = args.collect{|x| Hash[*x.split(/=/)] }.inject({}){|result, item|
        result.merge(item)
      } || {}
      send(cmd,cmdarg)
    end

  end
  class StickiesCmd < AbstractStickiesCmd
    def test
      Calacoles.backup
      z = Calacoles::StickiesArchive.load(Calacoles.db_path)
      require "pp"
      sl =  z.to_a[0]
      pp sl.doc
      pp sl.doc.object_id
      zz = nil
      z.to_a.each{|sl|
        zz = sl.doc.stringValue
        p sl.doc.object_id
      }
      #  p zz
      str = "       ああああzzzzzzzzz\nzzzzzzzzzzzzzzzzzzzzzzzz"
      slw =  Calacoles::StickiesLocal.new
      slw.init_doc(open(ARGV[0]).read,:type=>:doc,:out=>"hoge.rtf")
      z.stickies.addObject(slw.doc)
      z.save
      p z.to_a.size
      puts "fin"
      #  Calacoles.remove_backup
    end

    def save(opt={})
      opt.merge!(
        {:confdir=>File.join(ENV["HOME"],"Library/stickies-local")}) unless opt[:confdir]
      st_ar = Calacoles::StickiesArchive.load(Calacoles.db_path)
      opt[:host] ||=Socket.gethostname
      
      FileUtils.mkdir_p opt[:confdir]
      st_ar.to_a.each{|sl|
        fname = [opt[:host],sl.doc.object_id.to_s].join(":") + ".yaml"
        open(File.join(opt[:confdir],fname),"w+"){|f|
          f.write YAML.dump(sl.to_h)
        }
      }
    end

    def list(opt={})
      Calacoles.backup
      st_ar = Calacoles::StickiesArchive.load(Calacoles.db_path)
      st_ar.to_a.each{|sl|
        puts sl.title
      }
    end
    def show(opt)
      st_ar = Calacoles::StickiesArchive.load(Calacoles.db_path)
      sl = st_ar.to_a.find{|sl|
        sl.title && sl.title=~/#{opt["title"]}/
      }
      puts %Q[pos:#{sl.doc.windowFrame.to_a.join(":")}]
      puts sl.to_s(:type=>(opt["type"]|| "string").to_sym)
      #}.join("")
    end
  end
end

if $0 == __FILE__
  sc = Calacoles::StickiesCmd.new
  sc.cmd(*ARGV.dup)
end
