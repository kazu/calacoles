#!/usr/bin/env ruby
require "stickies-local"
require "fileutils"
require "yaml"
require "socket"
require "pp"
module Calacoles

  class AbstractStickiesCmd

    def cmd(cmd,*args)
      cmdarg = args.collect{|x| Hash[*x.split(/=/)] }.inject({}){|result, item|
        result.merge(item)
      } || {}
      send(cmd,cmdarg)
    end

  end
  class StickiesCmd < AbstractStickiesCmd
    def test
      Calacoles.backup
      z = Calacoles::StickiesArchive.load(Calacoles.db_path)
      require "pp"
      sl =  z.to_a[0]
      pp sl.doc
      pp sl.doc.object_id
      zz = nil
      z.to_a.each{|sl|
        zz = sl.doc.stringValue
        p sl.doc.object_id
      }
      #  p zz
      str = "       ああああzzzzzzzzz\nzzzzzzzzzzzzzzzzzzzzzzzz"
      slw =  Calacoles::StickiesLocal.new
      slw.init_doc(open(ARGV[0]).read,:type=>:doc,:out=>"hoge.rtf")
      z.stickies.addObject(slw.doc)
      z.save
      p z.to_a.size
      puts "fin"
      #  Calacoles.remove_backup
    end

    def help(opt={})
      puts "usage: stickies-local COMMAND [ARGS] "
      puts "\nthe most commonlu used stickies-local commands are:"
      z=  {:save=>"save local stickies data as shareddata ",
         :sync=>"sync between local stickies data and shareddata",
         :find=>"pat=<regexp> find stickies with matching regexp",
         :set=>"pat=<regexp> <attribute>=value set value to attributes with regexp. \n\tyou must run sync command after this command. "
      }
      puts z.collect{|k,v|
          "  " +  [k.to_s,v.to_s].join("\t")
      }.join("\n")

    end

    def _confdir(opt={})
      opt.merge(
        {:confdir=>File.join(ENV["HOME"],
                             "Library/stickies-local")}
      )[:confdir]

    end
    def _datas(opt={})
      opt.merge!(
        {:confdir=>File.join(ENV["HOME"],
                             "Library/stickies-local")}
      ) unless opt[:confdir]
      Dir.glob(opt[:confdir]+"/*.yaml").collect{|x|
          z = YAML.load_file(x)
         if z.class == Hash
           z
         else
           nil
         end
      }.compact
    end
    def find(opt={})
      lsts = _datas(opt)
      lsts.collect!{|stl|
        unless stl[:desc] =~eval(opt["pat"]) # danger , should not use eval
          nil
        else
          stl
        end
      }.compact.sort_by{|x| x[:time] }.reverse.each{|stl|
        stl.delete(:raw)
        #puts stl.pretty_inspect
        puts "------\n"+ stl.collect{|k,v|
          [k.to_s,
            v.to_s.gsub(/^(.)/){|x| "\t" + x  }
          ].join(": ")
        }.join("\n")+"\n"
      }
    end


    def set(opt={})
      lsts = _datas(opt)
      lsts.collect!{|stl|
        unless stl[:desc] =~eval(opt["pat"]) # danger , should not use eval
          nil
        else
          puts stl[:title]
          opt.reject{|k,v| k == "opt"  }.each{|k,v|
            stl[k.to_sym] = v.to_i # only support fixnum
          }
          stl
        end
      }.compact.each{|stl|
        stl[:time] = Time.now
        opt[:host] ||=Socket.gethostname
        fname = [opt[:host],stl.object_id.to_s].join(":") + ".yaml"
        open(File.join(_confdir,fname),"w+"){|f|
          f.write YAML.dump(stl)
        }
      }
    end

    def removeall(opt={})
      st_ar = Calacoles::StickiesArchive.load(Calacoles.db_path)
      st_ar.stickies.removeAllObjects
      st_ar.save
    end
    def sync(opt={})
      #save
      opt.merge!(
        {:confdir=>File.join(ENV["HOME"],"Library/stickies-local")}) unless opt[:confdir]
      st_ar = Calacoles::StickiesArchive.load(Calacoles.db_path)
      stickies = Dir.glob(opt[:confdir]+"/*.yaml").collect{|x|
         z = YAML.load_file(x)
         if z.class == Hash && z[:time]
           z
         else
           nil
         end
      }.compact.sort_by{|x| x[:time] }.reverse.inject([]){|res,val|
        unless val.class == Hash && res.find{|x| 
          begin
            x[:title] == val[:title]
          rescue
            false
          end
        }
          res << val
        else
          res
        end
      }.delete_if{|x| x.class != Hash }
      st_ar.replace(stickies)
      st_ar.save
      #GC.start
      puts "fin?"
      #st_ar.free_memory
    end

    def save(opt={})
      opt.merge!(
        {:confdir=>File.join(ENV["HOME"],"Library/stickies-local")}) unless opt[:confdir]
      st_ar = Calacoles::StickiesArchive.load(Calacoles.db_path)
      opt[:host] ||=Socket.gethostname
      
      FileUtils.mkdir_p opt[:confdir]
      st_ar.to_a.each{|sl|
        fname = [opt[:host],sl.doc.object_id.to_s].join(":") + ".yaml"
        hash = sl.to_h
        open(File.join(opt[:confdir],fname),"w+"){|f|
          f.write YAML.dump(hash)
        } if hash.class == Hash 
      }
    end

    def _list(opt={})
      Calacoles.backup
      st_ar = Calacoles::StickiesArchive.load(Calacoles.db_path)
      st_ar.to_a.each{|sl|
        puts sl.title
      }
    end
    def show(opt)
      st_ar = Calacoles::StickiesArchive.load(Calacoles.db_path)
      sl = st_ar.to_a.find{|sl|
        sl.title && sl.title=~/#{opt["title"]}/
      }
      puts %Q[pos:#{sl.doc.windowFrame.to_a.join(":")}]
      puts %Q[flag:#{sl.doc.windowFlags.inspect}]
      puts sl.to_s(:type=>(opt["type"]|| "string").to_sym)
      #}.join("")
    end
  end
end

if $0 == __FILE__
  sc = Calacoles::StickiesCmd.new
  sc.cmd(*ARGV.dup)
end
